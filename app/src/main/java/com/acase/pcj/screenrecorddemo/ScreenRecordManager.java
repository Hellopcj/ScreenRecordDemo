package com.acase.pcj.screenrecorddemo;import android.hardware.Camera;import android.hardware.display.DisplayManager;import android.hardware.display.VirtualDisplay;import android.media.MediaRecorder;import android.media.projection.MediaProjection;import android.os.Build;import android.support.annotation.RequiresApi;// 屏幕录制控制器@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)public class ScreenRecordManager {    private MediaRecorder mRecorder;    private boolean isRecording;    private static volatile ScreenRecordManager mInstance;    private int mPreviewWidth = 1280;    private int mPreviewHeight = 720;    private int mScreenDensity;    private MediaProjection mMediaProjection;    private VirtualDisplay mVirtualDisplay;    private ScreenRecordManager() {    }    /**     * 获取屏幕相关数据     */    public static synchronized ScreenRecordManager getInstance() {        if (mInstance == null) {            mInstance = new ScreenRecordManager();        }        return mInstance;    }    public void initMediaRecorder(Camera mCamera, String path, int width, int height, MediaProjection mp) {        mRecorder = new MediaRecorder();//实例化        mRecorder.reset();      //  this.mMediaProjection = mp;        mCamera.unlock();        //给Recorder设置Camera对象，保证录像跟预览的方向保持一致        mRecorder.setCamera(mCamera);        mRecorder.setOrientationHint(90);  //改变保存后的视频文件播放时是否横屏(不加这句，视频文件播放的时候角度是反的)        mRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE); // 设置从SURFACE采集图像        mRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);  // 设置视频的输出格式 为MP4        mRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264); // 设置视频的编码格式        mRecorder.setVideoEncodingBitRate(3 * 1024 * 1024);// 设置视频编码的比特率        mRecorder.setVideoSize(width, height);  // 设置视频大小        //设置视频存储路径        mRecorder.setOutputFile(path);        startRecording();    }    public void startRecording() {        if (mRecorder != null) {            try {                mRecorder.prepare();                // 创建虚拟屏幕             //   mVirtualDisplay = createVirtualDisplay();                mRecorder.start();            } catch (Exception e) {                isRecording = false;            }        }        isRecording = true;    }    public void stopRecording() {        if (mRecorder != null) {            mRecorder.setOnErrorListener(null);            mRecorder.setOnInfoListener(null);            mRecorder.setPreviewDisplay(null);            mRecorder.stop();            mRecorder.release();            mRecorder = null;        }//        if (mVirtualDisplay != null) {//            mVirtualDisplay.release();//            mVirtualDisplay = null;//        }//        if (mMediaProjection != null) {//            mMediaProjection.stop();//            mMediaProjection = null;//        }        isRecording = false;    }    public void setScreenDensity(int density) {        this.mScreenDensity = density;    }    private VirtualDisplay createVirtualDisplay() {        return mMediaProjection.createVirtualDisplay("MainScreen", mPreviewWidth, mPreviewHeight, mScreenDensity,                DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR, mRecorder.getSurface(), null, null);    }}